/* 
 * File:   ProcessorCapabilities.h
 * Author: daniel
 *
 * Created on March 5, 2016, 11:53 AM
 */

#ifndef PROCESSORCAPABILITIES_H
#define	PROCESSORCAPABILITIES_H

/*!
 * Container for storing and accessing capabilities of an audio-processor.
 * 
 * These capabilities are completely optional and their availability or unavailability does not impede the basic
 * functionality of the library. However they provide useful information about an audio-processor and can be used 
 * to improve some compatibilities and functionalities.
 */
struct ProcessorCapabilities
{
    /*!
     * Specifies whether the associated audio-processor is a codec (and therefore converts between audio-formats).
     * Usually, there can only be one codec in a processor-chain, since all codecs encode from and decode to raw PCM samples.
     */
    const bool isCodec : 1;
    /*!
     * Specifies whether the processor can detect silence (audio-level beneath a certain threshold) 
     * and sets the silence-flag in StreamData accordingly.
     * Another term for the capability to detect silence is VAD (voice activity detection)
     */
    const bool canDetectSilence : 1;
    /*!
     * Specified whether the processor can handle silence-packages (e.g. as a result of DTX).
     * The handling of silence-packages can vary from simply doing nothing on them (e.g. for an amplifier-processor)
     * to generating CNG (acting as comfort noise generator, e.g. for codecs) or any other implementation
     * of PLC (package loss concealment)
     */
    const bool canHandleSilence : 1;
    /*!
     * Specifies whether this audio-processor acts as an CNG in case of a silence-package and generates some kind of 
     * low strength comfort noise. Comfort noise simulates noise in the transmission so the user doesn't think the 
     * connection has broken off.
     */
    const bool generatesComfortNoise : 1;
    /*!
     * Specifies whether this audio-processor generates and handles additional data in the audio-package for the purpose of 
     * FEC (forward error correction) and is therefore able to compensate (at least parts of) lost packages.
     */
    const bool usesForwardErrorCorrection : 1;
    /*!
     * Specifies a bitmap of supported sample-rates the internal resampler (if any) supports. 
     * If no internal resampling is supported, this field is set to zero. The sample-rates are set as flags according to
     * their values in AudioConfiguration::SAMPLE_RATE_XXX.
     */
    const unsigned int supportedResampleRates;
    /*!
     * Specifies a rough estimate of the maximum bandwidth required to transport payload generated by this processor.
     * This field is usually only meaningful for codecs. The value is the maximum bandwidth 
     * (e.g. the bandwidth required for the highest sample-rate and package-size supported by this processor) in Bytes 
     * per second or zero to set the value as undefined.
     */
    const unsigned int maximumBandwidth;
    
    /*!
     * Specifies whether the processor has an internal resampler, which allows it to support additional sample-rates
     * other than the internally handled. E.g. a codec which uses an internal resampler may accept a range of (or arbitrary)
     * sampling rates and internally convert them to the sample-rate(s) supported by the codec.
     */
    bool canResample() const
    {
        return supportedResampleRates != 0;
    }
};

#endif	/* PROCESSORCAPABILITIES_H */

